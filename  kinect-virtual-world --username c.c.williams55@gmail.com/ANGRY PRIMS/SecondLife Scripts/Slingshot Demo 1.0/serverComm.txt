// Author: Francis Sabado and Christian Williams
// Second Life Modeling Project
// Fall 2011
// Artificial Intelligence Project


//This smart object is able to interpret command from the user
//and change attributes automatically


//--------HTTP Functions---------//

    //User Variables
string URL = "http://turing.csce.uark.edu/~ccw005/SecondLifeServer.php";
key httpkey;
key requestURL;
string objectURL;
integer listen_remove;

//Preferences
integer editable = 1; // Denote if could be edited; 1 = true , 0 = false

integer debug_mode = 2;

// send this objects information to the php server.
phpMethodSelect(string phpMethod)
{
    
     // Register with the php server by sending the address of this prim to the server with 
     // the name of the prim to act as the primary kedy.
     
     httpkey = llHTTPRequest(URL,[HTTP_METHOD,"POST",HTTP_MIMETYPE,"application/x-www-form-urlencoded"],"primUrl="+objectURL+"&primName="+llGetObjectName()+"&httpRequest=" + phpMethod);
     
     
     
    //httpkey = llHTTPRequest(URL,[HTTP_METHOD,"POST",HTTP_MIMETYPE,"application/x-www-form-urlencoded"] ,"primUrl="+objectURL+"&primName="+ objName +"&httpRequest=" + phpMethod);
}

//Parses the command from the http request for the command interpreter
list parseHTTPCommand(string body)
{
    list command = llParseString2List(body, ["&","="," ",","],[]);
    list newCommand = [];
    integer numCommand = llGetListLength(command);
    if(numCommand % 2 != 0 )
    {
        return [];
    }else{
        integer i = 1;
        for( ; i < numCommand; i = 2 + i){
            newCommand = (newCommand =[]) + newCommand +
                     llList2String(command,i);
        }     
    }
        
    integer i;
    integer s = llGetListLength(newCommand);
    //llSay(0,"Saying Command:");
    do
    //llOwnerSay(llList2String(newCommand,i));
    ;
    while(s>++i);        
                     
    return newCommand;
}

//--------Communcation and Command Interpreter-------//
//Communication to the object that takes a string
commString(string message){
    list command = llParseString2List(message,[" ",","],[]); //Parse command
    commList(command);
}
//Communication to the object that takes a list
commList(list command){
    
    integer length = llGetListLength(command);
    if(length =! 7){
        return;
    }
    integer fire = llList2Integer(command,0); //command header
    
    integer rightDeg = llList2Integer(command,1);
    integer leftDeg = llList2Integer(command,2);
    integer upDeg = llList2Integer(command,3);
    integer downDeg = llList2Integer(command,4);
    integer inc = llList2Integer(command,5);
    integer dec = llList2Integer(command,6);
    
    integer right_left_diff = rightDeg - leftDeg;
    integer up_down_diff = upDeg - downDeg;
    integer inc_dec_diff = inc - dec;
    
    key _key = llDetectedKey(0);
    
    //Change left or right
    if( right_left_diff > 0){
        llMessageLinked(LINK_THIS, right_left_diff, "right", _key);
    }else{
        llMessageLinked(LINK_THIS, -right_left_diff, "left", _key);
    }
    
    //Change up or down
    if(up_down_diff > 0 ){
        llMessageLinked(LINK_THIS, up_down_diff, "up",_key);        
    }else{
        llMessageLinked(LINK_THIS,-up_down_diff, "down", _key);    
    }

    //Change Power
    if( inc_dec_diff > 0){
        llMessageLinked(LINK_THIS, inc_dec_diff, "inc", _key);   
    }else{
        llMessageLinked(LINK_THIS, -inc_dec_diff, "dec", _key);        
    }

    llSleep(.7); //Sleeps so the object has time to change values.
    //Check if Fire
    if( fire > 0){
        llMessageLinked(LINK_THIS,0,"fire",_key);        
    }
        
    
}
    



//------------Debug Code---------//
// Debug incoming requests to see all header information.
debug(key id, string method, string body)
{
    llOwnerSay(method + ": " + body);
    list headers = ["x-script-url","x-path-info","x-query-string",        "x-remote-ip","user-agent"];
    integer i;
    for (i=0;i<5;++i)
    {
        llOwnerSay(llList2String(headers,i) + ": " + llGetHTTPHeader(id,llList2String(headers,i)));
    }
}
            
        
    
//-------------States------------//
default
{
    state_entry()
    {
        //llSay(0, "Hello, Avatar!");
        
        // get the number of urls for the region.
        integer freeurls = llGetFreeURLs();
        //llSay(0,(string)freeurls);       
        if(freeurls > 0)
        {
             //request a url for this object.
            requestURL = llRequestURL();
        }
        else
        {
             llSay(0, "No urls available!");
        }

        //Waiting for commands
        llListen(0,"","","");
        
        phpMethodSelect("removePrim");

    }

    //When regions change, the URLs are invalidated
    //Ask for new URL   
    changed(integer What) {
        //Region restarted
        if (What & CHANGED_REGION_START) {
            //Request new URL
            llRequestURL();
        }
    }    
    touch_start(integer total_number)
    {
        //state touched;
    }
    
    //Command Listener
    //Takes command if editable is 1, ignores if 0 unless turning on
    listen(integer channel, string name, key id, string message)
    {
        llSay(0,"Received: " + message);
        if(message == "remove")
       {
            phpMethodSelect("removePrim");
       }else
       if(message == "register")      
       {     
            phpMethodSelect("registerPrim");
       }else
       if(message == "url")
       {
            phpMethodSelect("getPrimUrl");    
       }else
       if(message == "list")
       {
            phpMethodSelect("getPrimList");    
       }
        
        if( editable == 1){
            //llSay(0,"Interpreting: " + message);
            if( debug_mode == 1){
                commString(message); //Command is sent interpreter
            }else
            if( debug_mode == 2){
                llMessageLinked(LINK_THIS,0,message,llDetectedKey(0));
            } 
       }else{
            if( message == "turn on"){
                llSay(0, "Turning On!");
                editable = 1;
            }     
        }         
    }
            
        
            
                
    // get the responce from the server from any interactions
    http_response(key id, integer status, list meta, string body)
    {
         if(httpkey == id)
         {
             //llSay(0,body);
         }           
    }
     
    
    // Parts of the following code method were taken from 
    // http://wiki.secondlife.com/wiki/LSL_http_server/examples
    http_request(key id, string method, string body)
    {
        if ((method == URL_REQUEST_GRANTED) && (id == requestURL) )
        {
            // An URL has been assigned to me.
            llOwnerSay("Obtained URL: " + body);
            objectURL = body;
            // register the prim with the server
            phpMethodSelect("registerPrim");   
            requestURL = NULL_KEY;
        }else 
        if ((method == URL_REQUEST_DENIED) && (id == requestURL)) 
        {
            // I could not obtain a URL
            llOwnerSay("There was a problem, and an URL was not  assigned: " + body);
            requestURL = NULL_KEY;
        }else 
        if (method == "POST") 
        {
            llSay(0,"POST Method Invoked");
            // An incoming message was received.
            //llOwnerSay("Received information from the outside: " +                   body);
            
            llSay(0,body);
            
            llMessageLinked(LINK_THIS,0,body,llDetectedKey(0));    
        
            //Parse the command such that the object can understand

            llHTTPResponse(id,200,"Thank you for calling. All of our operators are busy.");
 
            list comm = parseHTTPCommand(body);
            if( llGetListLength(comm) == 0){
                //llSay(0,"Invalid argument number");
            }else
            {
                //Sending command to the command interpreter
                commList(comm);

            }
            

                
        }else 
        if( method == "GET"){
             
            //llSay(0,"GET Method Invoked");
            //llSay(0,"Body:" + body);
            
            // Process a status update by parsing the query string
            string t = llGetHTTPHeader(id,"x-query-string");
            list l = llParseString2List(t,["?","=","&"],[]);
                
            //llSay(0,"Query:" + t);
            
            list headers = [ "x-script-url", "x-path-info", "x-query-string", "x-remote-ip", "user-agent" ];
            integer pos = ~llGetListLength(headers);
            while( ++pos )
            {
                string header = llList2String(headers, pos);
                //llOwnerSay(header + ": " + llGetHTTPHeader(id, header));
            }
            //llOwnerSay( "body: " + body);
             
            llMessageLinked(LINK_THIS,0,body,llDetectedKey(0));  
               
            llHTTPResponse(id, 200, "Command Succeeded");
              
            //Parse the command such that the object can understand
            list comm = parseHTTPCommand(t);
            if( llGetListLength(comm) == 0){
                //llSay(0,"Invalid argument number");
            }else
            {
                //Sending command to the command interpreter
                commList(comm);
            }
               

        }else 
        {
            // An incoming message has come in using a method that has not been anticipated.
            llSay(0,body);
            llHTTPResponse(id,405,"Unsupported Method");
        }
        
    } 
}

