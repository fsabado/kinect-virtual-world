
 // Rez an object on touch, with relative position, rotation, and velocity all described in the rezzing prim's coordinate system.
string object = "bulletv6"; // Name of object in inventory
vector relativePosOffset = <2.5, 0.0, 0.0>; // "Forward" and a little "above" this prim
vector relativeVel = <10.0, 0.0, 0.0>; // Traveling in this prim's "forward" direction at 1m/s
rotation relativeRot = <0.707107, 0.0, 0.0, 0.707107>; // Rotated 90 degrees on the x-axis compared to this prim

float velocity = 0;
float VEL_INC = 2.0;
integer objLife = 30;
string cannonSound = "bomb";
integer ANGLE_INC = 5; 


 //--------Communcation and Command Interpreter-------//
//Communication to the object that takes a string
commString(string message){
    list command = llParseString2List(message,[" "],[]); //Parse command
    commList(command);
}
//Communication to the object that takes a list
commList(list command){
    


    integer length = llGetListLength(command);
    if(length == 0){
        return;
    }
    string comm = llList2String(command,0); //command header
    
    if( comm == "fire"){
            //param = command;
    }
    
    //Change editable
    //if( comm == "turn"){
      //  string button = llList2String(command, 1);
        //if( button == "on"){
          //  editable = 1;    
        //}else
        //if( button == "off"){
          //  editable = 0;
        //}
    //}else
    //if(editable == 0){
      //  return;           
    //}else
    //Change color
    //if( comm == "color"){
      //  float r = llList2Float(command,1);
        //float g = llList2Float(command,2);
        //float b = llList2Float(command,3);
            
        //if(length != 5){
            //changeColor( r, g, b,ALL_SIDES); 
        //}else{
           // integer sides = (integer) llList2String(command,4);
            //changeColor( r, g, b, sides);
        //}     
    //}else 
    //Change size
    //if( comm == "size"){
      //  float x = llList2Float(command,1);
        //float y = llList2Float(command,2);
        //float z = llList2Float(command,3);;
        //changeSize(x, y, z);
    //}else
    //Change rotation
    //if( comm == "rotation"){
      //  float x = llList2Float(command,1);
       // float y = llList2Float(command,2);
        //float z = llList2Float(command,3);
        //changeRotation(x, y, z);   
    //}else
    //Change type
    //if( comm == "type"){
      //  string type =  llList2String(command,1);
        //changeObjType(type);
    //}

        
    
}


fire(){
     //llSay(0,"Hello");
        vector t = <0.0, 0.0 ,0.0> * DEG_TO_RAD;
        rotation rot30X = llEuler2Rot(t);
 
        vector myPos = llGetPos();
        rotation myRot = llGetRot();
 
        vector rezPos = myPos+relativePosOffset*myRot;
        vector rezVel = relativeVel*myRot;
        //rotation rezRot = relativeRot*myRot;
        rotation rezRot = rot30X*myRot;
 
        
         llSetLinkPrimitiveParamsFast(2,[PRIM_POINT_LIGHT,TRUE,<255,255,128>,1.0,10.0,0.750]);
            llSetLinkPrimitiveParamsFast(2,[PRIM_GLOW,ALL_SIDES,0.3]);
             llSetLinkAlpha(2, 1.0, ALL_SIDES);
   llSetLinkPrimitiveParamsFast(2,[PRIM_FULLBRIGHT,ALL_SIDES,TRUE]);
            llPlaySound(cannonSound,1.0);

             //llRezObject(object, rezPos, rezVel, rezRot, startParam);
        llRezObject(object,rezPos, llVecNorm(<1,0,0>*myRot)*velocity, rezRot, objLife);

         llSleep(1.0);

            llSetLinkPrimitiveParamsFast(2,[PRIM_GLOW,ALL_SIDES,0.0]);
   llSetLinkPrimitiveParamsFast(2,[PRIM_FULLBRIGHT,ALL_SIDES,FALSE]);
 llSetLinkPrimitiveParamsFast(2,[PRIM_POINT_LIGHT,FALSE,<255,255,128>,1.0,10.0,0.750]);
              llSetLinkAlpha(2, 0.0, ALL_SIDES);
}        
    

default
{
    state_entry(){
    
            //Waiting for commands

        llSetLinkAlpha(2, 0.0, ALL_SIDES); 
        llSetLinkPrimitiveParamsFast(2,[PRIM_GLOW,ALL_SIDES,0.0]);
        llSetLinkPrimitiveParamsFast(2,[PRIM_FULLBRIGHT,ALL_SIDES,FALSE]);
        llSetLinkPrimitiveParamsFast(2,[PRIM_POINT_LIGHT,FALSE,<255,255,128>,1.0,10.0,0.750]);
        
         integer listenHandle = llListen(0,"","","");
        
    }
        
     link_message(integer source, integer num, string str, key id){
        commString(str);
        if( str == "fire"){
             fire();
        }
    }

 
    touch_start(integer a)
    {
        fire();
        
    }
        
        
    on_rez(integer st)
    {
          llPreloadSound(cannonSound);
        llResetScript();   
    }
        
    listen(integer channel, string name, key id, string message)
    {
        if( message == "inc"){
            velocity += VEL_INC;    
        }       
        if( message == "dec"){
            velocity -= VEL_INC;    
        }
    }
        
}